{"version":3,"sources":["components/todo-list.jsx","components/todo-input.jsx","components/todo-filter.jsx","App.js","serviceWorker.js","index.js"],"names":["CheckBox","renderInput","todo","isEditing","type","className","value","content","onChange","e","props","onEdit","id","Fragment","time","this","changedStatus","checked","status","Component","TodoList","toggleTodo","target","tagName","onToggle","console","log","onDelete","onEditStatus","onClick","TodoInput","onChangeContent","onAdd","TodoFilter","onChangeFilter","todos","filter","currentTab","data-type","length","App","getCurrentTime","onlyDate","addZeroBefore","n","now","Date","date","getMonth","getDate","getHours","getMinutes","state","newContent","getContent","setState","handleAdd","handleDelete","handleToggle","map","Number","handleFilter","dataset","handleEditStatus","handleEdit","todoData","localStorage","getItem","oldTodos","JSON","parse","prevProps","prevState","setItem","stringify","key","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAEMA,E,2MACJC,YAAc,SAACC,GACb,OAAIA,EAAKC,UACA,2BAAOC,KAAK,OAAOC,UAAU,eAAeC,MAAOJ,EAAKK,QAC7DC,SAAU,SAACC,GAAD,OAAO,EAAKC,MAAMC,OAAOF,EAAGP,EAAKU,OAG7C,kBAAC,IAAMC,SAAP,KACE,+BAAQX,EAAKK,QAAQ,4BAAKL,EAAKY,S,wEAM3B,IAAD,EACyBC,KAAKL,MAA7BM,EADD,EACCA,cAAed,EADhB,EACgBA,KACvB,OACE,kBAAC,IAAMW,SAAP,KACE,2BAAOT,KAAK,WAAWI,SAAUQ,EAAeC,QAASf,EAAKgB,SAC7DH,KAAKd,YAAYC,GAClB,0BAAMG,UAAU,kB,GApBDc,aA4DRC,E,2MAhCbC,WAAa,SAACZ,EAAGP,GAEf,GAAIA,EAAKC,WAAmC,WAArBM,EAAEa,OAAOC,QAAuB,OAAO,EAC9D,EAAKb,MAAMc,SAAStB,EAAKU,K,EAG3BI,cAAgB,WACdS,QAAQC,IAAI,Y,wEAGJ,IAAD,SAC0CX,KAAKL,MAA9CR,EADD,EACCA,KAAMyB,EADP,EACOA,SAAUC,EADjB,EACiBA,aAAcjB,EAD/B,EAC+BA,OACtC,OACE,yBAAKN,UAAU,sCAAsCwB,QAAS,SAACpB,GAAD,OAAO,EAAKY,WAAWZ,EAAGP,KACtF,kBAAC,EAAD,CAAUA,KAAMA,EAAMc,cAAeD,KAAKC,cAAeL,OAAQA,IACjE,yBAAKN,UAAU,YACb,4BAAQwB,QAAS,kBAAMF,EAASzB,EAAKU,KACnCP,UAAU,wBAGZ,4BAAQwB,QAAS,kBAAMD,EAAa1B,EAAKU,KACvCP,UAAS,4BAAuBH,EAAKC,UAAY,YAAc,MAEjE,4BAAQE,UAAS,sBAAiBH,EAAKgB,OAAS,YAAc,SAC3DhB,EAAKgB,OAAS,eAAO,4B,GAzBXC,aClBRW,EATG,SAAC,GAAuC,IAArCxB,EAAoC,EAApCA,MAAOyB,EAA6B,EAA7BA,gBAAiBC,EAAY,EAAZA,MAC3C,OACE,yBAAK3B,UAAU,+BACb,2BAAOD,KAAK,OAAOE,MAAOA,EAAOE,SAAUuB,EAAiB1B,UAAU,+BACtE,4BAAQwB,QAASG,EAAO3B,UAAU,0CAAlC,kBCkBS4B,EAtBI,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACrCC,EAAa,SAACjC,GAElB,OADAqB,QAAQC,IAAIU,GACLA,IAAWhC,EAAO,GAAK,YAGhC,OACE,yBAAKC,UAAU,yBACb,4BAAQwB,QAASK,EAAgBI,YAAU,MACzCjC,UAAS,wBAAmBgC,EAAW,OAA9B,YACTjC,KAAK,UAFP,gBAGA,4BAAQyB,QAASK,EAAgBI,YAAU,aACzCjC,UAAS,wBAAmBgC,EAAW,cAA9B,YACTjC,KAAK,UAFP,sBAGA,uBAAGC,UAAU,aAAb,eACE,0BAAMA,UAAU,4CAA4C8B,EAAMC,OAAO,SAAAlC,GAAI,OAAKA,EAAKgB,SAAQqB,QADjG,0C,6jBC4JSC,E,YArKb,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KAIR+B,eAAiB,SAACC,GAChB,IAAMC,EAAgB,SAACC,GAAD,OAAQA,EAAI,GAAK,IAAM,IAAMA,GAC7CC,EAAM,IAAIC,KACVC,EAAI,UAAMF,EAAIG,WAAa,EAAvB,YAA4BH,EAAII,WACpCnC,EAAI,UAAM6B,EAAcE,EAAIK,YAAxB,YAAuCP,EAAcE,EAAIM,eACnE,OAAOT,EAAWK,EAAH,UAAaA,EAAb,aAAsBjC,IAVpB,EAanBsC,MAAQ,CACNjB,MAAO,CACL,CACEvB,GAAI,EACJL,QAAS,+DACTW,OAAQ,EACRf,WAAW,EACXW,KAAM,EAAK2B,mBAGfY,WAAY,GACZjB,OAAQ,MACRxB,GAAI,GAzBa,EAkDnB0C,WAAa,SAAC7C,GACZ,EAAK8C,SAAS,CACZF,WAAY5C,EAAEa,OAAOhB,SApDN,EAwDnBkD,UAAY,WACV,EAAKD,SAAS,CACZpB,MAAM,GAAD,mBACA,EAAKiB,MAAMjB,OADX,CAEH,CACEvB,GAAI,EAAKA,GAAK,EACdL,QAAS,EAAK6C,MAAMC,WACpBnC,OAAQ,EACRf,WAAW,EACXW,KAAM,EAAK2B,oBAGfY,WAAY,KAEd,EAAKzC,MAtEY,EAyEnB6C,aAAe,SAAC7C,GACd,EAAK2C,SAAS,CACZpB,MAAO,EAAKiB,MAAMjB,MAAMC,OAAO,SAAAlC,GAAI,OAAIA,EAAKU,KAAOA,OA3EpC,EAgFnB8C,aAAe,SAAC9C,GACd,EAAK2C,SAAS,CACZpB,MAAO,EAAKiB,MAAMjB,MAAMwB,IAAI,SAAAzD,GAC1B,OAAOA,EAAKU,KAAOA,EAAKV,EAAjB,KACFA,EADE,CAELgB,OAAQ0C,QAAQ1D,EAAKgB,eArFV,EA2FnB2C,aAAe,SAACpD,GACd,EAAK8C,SAAS,CACZnB,OAAQ3B,EAAEa,OAAOwC,QAAQ1D,QA7FV,EAiGnB2D,iBAAmB,SAACnD,GAClB,EAAK2C,SAAS,CACZpB,MAAO,EAAKiB,MAAMjB,MAAMwB,IAAI,SAAAzD,GAC1B,OAAOA,EAAKU,KAAOA,EAAKV,EAAjB,KACFA,EADE,CAELC,WAAYD,EAAKC,iBAtGN,EA4GnB6D,WAAa,SAACvD,EAAGG,GACf,EAAK2C,SAAS,CACZpB,MAAO,EAAKiB,MAAMjB,MAAMwB,IAAI,SAAAzD,GAC1B,OAAOA,EAAKU,KAAOA,EAAKV,EAAjB,KACFA,EADE,CAELK,QAASE,EAAEa,OAAOhB,aA/GxB,EAAKM,GAAK,EAFO,E,iFA8BjB,IAAMqD,EAAWC,aAAaC,QAAQ,QACtC,GAAIF,GAAyB,OAAbA,EAAmB,CACjC,IAAMG,EAAWC,KAAKC,MAAML,GAC5BlD,KAAKwC,SAAS,CACZpB,MAAOiC,IAETrD,KAAKH,GAAKwD,EAASA,EAAS7B,OAAS,GAAG3B,GAAK,K,yCAK9B2D,EAAWC,GAC5B/C,QAAQC,IAAIX,KAAKqC,MAAMjB,OACnBqC,EAAUrC,QAAUpB,KAAKqC,MAAMjB,OACjC+B,aAAaO,QAAQ,OAAQJ,KAAKK,UAAU3D,KAAKqC,MAAMjB,U,+BA2EjD,IAAD,SAC+BpB,KAAKqC,MAAnCjB,EADD,EACCA,MAAOkB,EADR,EACQA,WAAYjB,EADpB,EACoBA,OAC3B,OACE,kBAAC,IAAMvB,SAAP,KAEE,0BAAMR,UAAU,QACd,yBAAKA,UAAU,aACb,oCACF,0BAAMA,UAAU,QAAQU,KAAK0B,gBAAe,KAE1C,kBAAC,EAAD,CAAWnC,MAAO+C,EAAYrB,MAAOjB,KAAKyC,UAAWzB,gBAAiBhB,KAAKuC,aAC3E,kBAAC,EAAD,CAAYlB,OAAQA,EAAQF,eAAgBnB,KAAK8C,aAAc1B,MAAOA,IAGtE,yBAAK9B,UAAU,aAEX8B,EACGC,OAAO,SAAAlC,GAAI,MAAe,eAAXkC,GAA0BlC,EAAKgB,SAC9CyC,IAAI,SAAAzD,GAAI,OACP,kBAAC,EAAD,CACEyE,IAAKzE,EAAKU,GACVV,KAAMA,EACN0B,aAAc,EAAKmC,iBACnBpD,OAAQ,EAAKqD,WACbrC,SAAU,EAAK8B,aACfjC,SAAU,EAAKkC,mBAM3B,yBAAKrD,UAAU,eACb,0CACA,qOAGJ,yBAAKuE,MAAM,UAAX,8BAEE,4BAAQvE,UAAU,wB,GA9JVc,aCME0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1cb15556.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CheckBox extends Component {\n  renderInput = (todo) => {\n    if (todo.isEditing) {\n      return <input type=\"text\" className=\"todo-content\" value={todo.content}\n        onChange={(e) => this.props.onEdit(e, todo.id)}></input>;\n    }\n    return (\n      <React.Fragment>\n        <label>{todo.content}<em>{todo.time}</em></label>\n\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    const { changedStatus, todo } = this.props;\n    return (\n      <React.Fragment>\n        <input type=\"checkbox\" onChange={changedStatus} checked={todo.status} />\n        {this.renderInput(todo)}\n        <span className=\"checkbox\"></span>\n      </React.Fragment>\n    );\n  }\n}\n\n\nclass TodoList extends Component {\n  toggleTodo = (e, todo) => {\n    // => 因為要排除 button & 編輯中狀態，所以獨立出來\n    if (todo.isEditing || (e.target.tagName === 'BUTTON')) return false;\n    this.props.onToggle(todo.id);\n  }\n\n  changedStatus = () => {\n    console.log('changed');\n  }\n\n  render() {\n    const { todo, onDelete, onEditStatus, onEdit } = this.props;\n    return (\n      <div className=\"item d-flex justify-content-between\" onClick={(e) => this.toggleTodo(e, todo)}>\n        <CheckBox todo={todo} changedStatus={this.changedStatus} onEdit={onEdit} />\n        <div className=\"btn-area\">\n          <button onClick={() => onDelete(todo.id)}\n            className=\"mr-2 btn btn_delete\">\n          </button>\n\n          <button onClick={() => onEditStatus(todo.id)}\n            className={`mr-2 btn btn_edit ${todo.isEditing ? 'isEditing' : ''}`}>\n          </button>\n          <button className={`badge badge-${todo.status ? 'secondary' : 'info'}`}>\n            {todo.status ? '完成' : '未完成'}\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\n\nconst TodoInput = ({ value, onChangeContent, onAdd }) => {\n  return (\n    <div className=\"input-group mb-3 input-text\">\n      <input type=\"text\" value={value} onChange={onChangeContent} className=\"form-control input_addTodo\" />\n      <button onClick={onAdd} className=\"ml-2 btn_add btn btn-outline-secondary\">送出</button>\n    </div>\n  );\n}\n\nexport default TodoInput;","import React from 'react';\n\nconst TodoFilter = ({ onChangeFilter, todos, filter }) => {\n  const currentTab = (type) => {\n    console.log(filter);\n    return filter === type ? '' : '-outline';\n  }\n\n  return (\n    <div className=\"btn-group todo-filter\">\n      <button onClick={onChangeFilter} data-type='all'\n        className={`btn btn-sm btn${currentTab('all')}-success`}\n        type=\"button\">所有</button>\n      <button onClick={onChangeFilter} data-type='compeleted'\n        className={`btn btn-sm btn${currentTab('compeleted')}-success`}\n        type=\"button\">已完成</button>\n      <p className=\"ml-2 mb-0\">還有\n        <span className=\"ml-2 mr-2 badge badge-pill badge-success\">{todos.filter(todo => !todo.status).length}</span>\n        件未完成任務\n      </p>\n    </div>\n  );\n}\n\nexport default TodoFilter;","import React, { Component } from 'react';\nimport TodoList from './components/todo-list';\nimport TodoInput from './components/todo-input';\nimport TodoFilter from './components/todo-filter';\nimport './todo.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.id = 0;\n  }\n\n  getCurrentTime = (onlyDate) => {\n    const addZeroBefore = (n) => (n < 10 ? '0' : '') + n;\n    const now = new Date();\n    const date = `${now.getMonth() + 1}/${now.getDate()}`;\n    const time = `${addZeroBefore(now.getHours())}:${addZeroBefore(now.getMinutes())}`;\n    return onlyDate ? date : `${date}  ${time}`;\n  }\n\n  state = {\n    todos: [\n      {\n        id: 0,\n        content: '沒內容我就會出現唷！',\n        status: 0,\n        isEditing: false,\n        time: this.getCurrentTime(),\n      }\n    ],\n    newContent: '',\n    filter: 'all',\n    id: 0\n  }\n\n  // 初始化\n  componentDidMount() {\n    const todoData = localStorage.getItem('todo');\n    if (todoData && todoData !== '[]') {\n      const oldTodos = JSON.parse(todoData);\n      this.setState({\n        todos: oldTodos,\n      })\n      this.id = oldTodos[oldTodos.length - 1].id + 1;\n    }\n  }\n\n  // 更新過後\n  componentDidUpdate(prevProps, prevState) {\n    console.log(this.state.todos);\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todo', JSON.stringify(this.state.todos));\n    }\n  }\n\n\n\n  getContent = (e) => {\n    this.setState({\n      newContent: e.target.value\n    });\n  }\n\n  handleAdd = () => {\n    this.setState({\n      todos: [\n        ...this.state.todos,\n        {\n          id: this.id + 1,\n          content: this.state.newContent,\n          status: 0,\n          isEditing: false,\n          time: this.getCurrentTime(),\n        }\n      ],\n      newContent: '',\n    })\n    this.id++;\n  }\n\n  handleDelete = (id) => {\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    })\n  }\n\n\n  handleToggle = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        return todo.id !== id ? todo : {\n          ...todo,\n          status: Number(!todo.status)\n        }\n      })\n    })\n  }\n\n  handleFilter = (e) => {\n    this.setState({\n      filter: e.target.dataset.type\n    })\n  }\n\n  handleEditStatus = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        return todo.id !== id ? todo : {\n          ...todo,\n          isEditing: !todo.isEditing\n        }\n      })\n    })\n  }\n\n  handleEdit = (e, id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        return todo.id !== id ? todo : {\n          ...todo,\n          content: e.target.value\n        }\n      })\n    })\n  }\n\n  render() {\n    const { todos, newContent, filter } = this.state;\n    return (\n      <React.Fragment>\n\n        <main className=\"main\">\n          <div className=\"card-body\">\n            <h1>Today\n          <span className=\"ml-2\">{this.getCurrentTime(true)}</span>\n            </h1>\n            <TodoInput value={newContent} onAdd={this.handleAdd} onChangeContent={this.getContent} />\n            <TodoFilter filter={filter} onChangeFilter={this.handleFilter} todos={todos} />\n\n\n            <div className=\"todo-list\">\n              {\n                todos\n                  .filter(todo => filter === 'compeleted' ? todo.status : true)\n                  .map(todo => (\n                    <TodoList\n                      key={todo.id}\n                      todo={todo}\n                      onEditStatus={this.handleEditStatus}\n                      onEdit={this.handleEdit}\n                      onDelete={this.handleDelete}\n                      onToggle={this.handleToggle}\n                    />\n                  ))\n              }\n            </div>\n          </div>\n          <div className=\"description\">\n            <h4>Todo  List</h4>\n            <p>此為 React 的練習作業，藉由基本的刪除、新增 Todo 功能去熟悉 React 的操作模式。\b</p>\n          </div>\n        </main>\n        <div class=\"author\">\n          © Copyright 2019, Yakim.\n          <button className=\"author-github\"></button>\n        </div>\n\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}